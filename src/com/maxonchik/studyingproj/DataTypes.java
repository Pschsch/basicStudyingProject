package com.maxonchik.studyingproj;

public class DataTypes {
    /* Существует несколько типов свойств (переменных)*/
    double $d; // Тип с плавающей точкой 8 байт
    byte _b; // целочисленный 1 байт
    short s; // целочисленный 2 байта
    int i; // целочисленный 4 байта
    char ch; // тип переменной символ, берется в одинарные кавычки. Переменная типа char является особенной переменной.
    //Символы в Java представляются в виде кодировки Unicode. Это значит, что определнному значению переменной соответствует
    //определнный символ. При присвоении переменной типа char целочисленного значения, выведется тот символ, которому соответсвует
    //это значение в кодировке Unicode. Например, при значении переменной типа char = 75, отображается буква "К".
    //или 664 - это ʘ(омега греческая).  https://unicode-table.com/ru/#ipa-extensions - таблица Юникода с номерами декодера символов
    boolean bool; //логический тип (true /false;) значение переменной типа boolean м/б использовано для управления условием if
    //Также, булевское значение является результатом выполнения операции сравнения.
    float f; // С плавающей точкой 4 байта, в конце значения ставится буква f
    long l; // целочисленный 8 байт, в конце значения ставится буква
    /*Эти 8 типов данных выше называются ПРИМИТИВНЫМИ типами*/
    String str; // тип переменной строка, не примитив, поэтому отдельный
    /*Сущетсвуют также объектные типы(ссылочные типы). Эти переменные содержат в себе ссылку на
    данные (свойства), которые были занесены в ячейку ОЗУ при их объявлении*/
    Human girl;
    Human boy; // и т.д.
    /* ЭТО НЕ ОБЪЕКТЫ! ЭТО ТОЛЬКО ССЫЛКИ!! Объект объявляется ключевым словом new*/
    //Нельзя использовать ключевые слова в названиях переменных, выдаст ошибку)
    // Первый символ: буква, символ доллара или нижнее подчеркивание!
    /*Названия переменных, методов и пр. обозначаются термином "идентификаторы".
    Названия идентификаторов составляются в соответствии с Java Code Conventions
    Инициализируются переменные либо константами, либо динамически. При динамической ининциализации, значение переменной
    присваивается в ходе выполнения программы.
    Объявлять переменные можно в любом блоке кода. блок кода определяет область действия переменных. Новый блок кода -
    это всегда новая область действия, которая определяет доступность и время жизни переменных(и объектов в целом).
    Если переменная находится внутри метода, то она доступна только в рамках метода, если внутри класса - то, в зави
    симости от модификаторов доступа, присвоенных переменной.
    Если переменная задана в рамках какого-либо метода, анпример, то, если метод не выполняется в данный момент времени выполнения
    программы, значение переменной метода выгружается из ОЗУ. Таким образом, время жизни переменной ограничивается областью действия.
    Во вложенном блоке имя переменной НЕ ДОЛЖНО СОВПАДАТЬ с именем переменной внешнего блока, так как, переменная внешнего блока
    уже была объявлена и ссылается на значение в памяти для переменной внешнего блока, следовательно не получится просто на просто объявить
    такую же переменную во внутреннем блоке. В плюсах, например нет такого ограничения, там переменная внутреннего блока просто
    наложится поверх переменной внешнего блока, но в Java это запрещено.

     */
    /*Литералы - это какие-либо постоянные значения. Для каждого типа данных предусмотрены свои типы литералов. Например,
    100 - это целочисленный литерал. Дробный литерал: 11.123 .По умолчанию, целочисленный литерал относится к типу int. Литерал типа
    long обозначается бувой L в конце значения литерала(например: 2501291830010L). В Java оддерживается экспоницеальный формат представ
    ления чисел. Литералы с плавающей точкой, по умолчанию, относятся к double, литерал типа float - буква f в конце значения.
    В значениях литералов возможно вставлять символы _. При компиляции, эти символы удаляются. Например, литерал 1234_45_1234.
    Это число 1234451234. Это удобно для представления всякого рода маркировок, номеров деталей и т.д.
    Значения литералов можно представлять в другой системе счисления. Наиболее часто исползуемые: восьмеричная и шестнадцатеричная.
    Чтобы записать шестнадцатеричную константу, она должная начинаться с символов 0x, например: 0xFF - это число 255.
    Чтобы записать восьмеричную константу - она должна начинаться с нуля: 011 - это число 9 в десятичной системе.
    Чтобы записать двоичный литерал, значение должно начинаться с символов 0b: 0b110 - это число 6.
    В Java используются специальные управляющие последовательности. они используются в литералах для того, чтобы ввести символ,
    который имеет специальное назначение, например, одинарную или двойную кавычку, символ возврата каретки и т.д. Эти управляющие
    последовательности. грубо говоря, заносят эти символы в литерал. Начинаются с обратной косой черты. Например: char ch='\"'
    Т.е переменная ch имеет значение двойной кавычки.
    Список этих последовательностей: \' - одинарная кавычка, \" - двойная, \\ - обратная косая черта, \r - возврат каретки,
    \n - перевод строки, \f - перевод страницы, \t - горизонтальная табуляция, \b - возврат на одну позицию, \ddd -
    восьмеричная константа(ddd - значение константы), \ - 16-чная константа( - 16-ное число)
    Строковый литерал - строка символов, заключенная в "". Например, при исп метода println() мы использовали строковые литералы.
    В строковых литералах  используются управляющие последовательности в качестве улучшения их читаемости при выводе.*/

    /*ОПЕРАЦИИ С ПЕРЕМЕННЫМИ
    1) +=(-=, *=б /=) - Составные операции присваивания со сложением, вычитанием и т.д.
    Пример: age+=2; Это значит, что параметр age увеличен на 2 и т.д. Также, составные операции присваивания бывают
    %= ,&=, |=, ^=.
    % - остаток от деления. Например 200 % 15 будет равняться 5(остаток от деления)
    = - операция присваивания (равно) У операции присваивания есть интересное свойство - создание цепочки операций присваивания.
   x = y = z = 100; Здесь поочередно значение левого операнда берет значение правого операнда, сначала присваивается значение к
   переменной z, затем y, затем х. С помощью операции присваивания возможно присвоить значение переменной одного типа переменной
   другого типа. Должно быть соблюдено 2 условия: 1)типы являются совместимыми, 2)целевой тип обладает более широким диапазоном
   значений, чем исходный. Например, тип byte может быть преобразован в int, но не наоборот. Также, целочисленные типы могут быть
   преобразованы в тип с плавающей точкой, но не наоборот. Любое такое пребразование с типами char и boolean невозможно, несмотря на
   то, что типу char м/б присвоен целочисленный литерал.
   Существует также прямое приведение(cast) типов. Это необходимо, когда нам нужно преобразовать значение какого-то выражения одного типа
   в другой напрямую. Для выполнения приведения, тип к которому нужно привести значение заключается в круглые скобки, т.е:
   i=(int) (x/y); Несмотря на то, что х и у - тип double, их результат можно привести к типу int. Правда, если рез-т выражения
   содержит дробную часть, она потеряется, т.к int - целочисленный тип.
    Операции сравнения:
    == - операция сравнения
    <=(>=, <,>) - больше или равно, меньше или равно, больше или меньше.
    ! - отрицание. Например: != - означает "не равно". Эти операции возвращают булевское значение.
    Если операция / применяется к целым числам, остаток от деления отбрасывается. Т.е, чтобы не терять точность, исп переменные
    типа с плавающей точкой.
    ЛОГИЧЕСКИЕ ОПЕРАЦИИ
    1) & - И, && - укороченное И, || - укороченное ИЛИ, | - ИЛИ,  ^ - исключающее ИЛИ.
    Операнды логических операций должны быть булевского типа.
    Ниже в таблице представлены результаты логических операций для различных булевских значений переменных a и b:
    a           b           a & b           a | b           a ^ b           !a
    false       false       false           false           false           true
    true        false       false           true            true            false
    false       true        false           true            true            true
    true        true        true            true            false            false
    Значение операции исключающее ИЛИ будет true только, если один из ее операндов имеет значение true.
    Укороченные версии операций И и ИЛИ позволяют провести быструю оценку выражений. Допустим, у нас выражение состоит из двух
    операндов op1 и op2. Если в операции op1 && op или op1 || op2, значение op1 = true(false), то вне зависимости от того, каково
    значение op2, выражение примет значение первого операнда. Т.е не нужно вычислять второй операнд, что очень удобно и менее ресурсо-
    ёмко.
    ПРИОРИТЕТЫ ОПЕРАЦИЙ(ВАЖНО)
    Высший приоритет
( )	[ ] .         Круглые скобки повышают приоритет любой операции,[] - объявление массива, . для вызова метода из класса
++ --	~	!
* / %
+ -
>> >>> <<
== !=
&
^
|
&&
||
= op=
Низший приоритет
Условный оператор ?: Используется, когда нужно задать значение переменной булевского типа, в зависимости от ее значения.
Конструкция имеет схему: значение булевской переменной ? значение для true : значение для false;
Допустим: boolean b; b ? 1 : 0; Т.е, если b = true, то в нее запишется значение 1, если false , то 0
Выражения: при использовании переменных в выражениях, разных типов, может происходить повышение типа переменных внутри выражения.
например, если идет сложение переменных типов byte и int, то результат выражения будет int. Для повышения удобочитаемости,
в выражениях применяют пробелы и табуляцию. При использовании скобок для обозначения приоритета, это не влияет на быстродействие
программы. Их также желательно применять для повышения удобочитаемости.
    /*БЛОКИ КОДА: также один из ключевых элементов программирования на Jаva. блоки используются ттогда, когда нам необходимо,
    чтобы несколько операций выполнились в одном и том же методе, или при одном и том же условии. Блок кода обозначается
    фигурными скобками{}. Открывающая фигурная скобка обозначает начало блока, закрывающая, соответсвенно, конец блока.
    Такие блоки, зачастую, являются телами методов и операторов. Главное их назначение - создание логически неделимых единиц кода.
    ; - разделитель инструкций, не ставится после блока кода*/
    /*КЛЮЧЕВЫЕ СЛОВА В JAVA: В данный момент существует 50 КЛЮЧЕВЫХ СЛОВ в Java, использующихся для обзоначений переменных, методов
    операций и т.д. Вот список этих слов:
   |---------------------------------------------------------------------------------------------------------|
   |  abstract  assert  boolean  break  byte  case  catch  char  class const  continue  default  do          |
   |  double  else  enum  extends  final  finally  float  for  goto  if  implements  import  instanceof  int |
   |  interface  long  native  new  package private  protected  public  return short  static  strictfp  super|
   |  switch    synchronized  this  throw  throws  transient  try  void  volatile   while                      |
   |---------------------------------------------------------------------------------------------------------|*/
    //const и goto в настоящее время не используются, также есть 3 логических значения true, false и null!!!.
    /*Java имеет ряд библиотек! Библиотеки - это сторонние классы, содержащие готовые методы для выполнения различных функций
    Удобны тем, что существует уже много готового кода, умеющего выполнять разные функции, при этом достаточно просто обратиться
    к нему в программе.
    Глава 3: Для ввода данных через консоль, используется метод System.in.read(). По умолчанию, он выводит значение целочисленное, поэтому
    для ввода символов, ему нужно присвоить тип char. данные, вводимые в консоли, буферизируются построчно. Буфер здесь - это ячейка памяти, куда заносится
    введеные символы, прежде чем они будут прочитаны программой.*/



    /*Ошибки начинающих программистов: 1) Отсутсвие практики - необходимо много практиковаться! Ставить задачи и выполнять их!
    2) Если есть вопросы - сначала загугли!!! Гугл - второй дом программиста
    3) Поспешишь - людей насмешишь! Нельзя спешить монетизировать свои знания! Необходимо сначал набраться опыта
    4)Программирование - это сплошная математика и логика!
    5)Английский, естественно, нужен)*/

public void SimpleCounts(){

}
}
